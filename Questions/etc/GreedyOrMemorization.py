'''
문제

통증지수라는 시스템이 있다. 통증 지수가 높다면 게임에서 승리하기 어려워지므로, 아이템을 적절히 사용해 통증 지수를 0으로 유지하는 것이 중요하다.
게임 안에는 통증 지수를 감소시켜 주는 아이템이 3종류가 있다. 아이템의 이름은 bandage, medicine, painkiller이고, 각 아이템을 사용 시 1, 7, 14만큼 통증 지수를 감소시켜 준다. 각 아이템은 원하는 만큼 획득할 수 있다.
플레이어는 적과의 전투에서 피해를 입어 현재 N의 통증 지수를 가지고 있다. 플레이어의 통증 지수를 0으로 줄이기 위해 필요한 아이템의 최소 개수를 구해보자. 단, 사용했을 때 통증 지수가 0보다 작아지는 아이템은 사용할 수 없음을 유의하시오.

입력

첫째 줄에 플레이어의 통증 지수를 나타내는 정수 N이 주어진다.
1 ≤ N ≤ 10⁹

출력
플레이어가 통증 지수를 0으로 줄이기 위해 필요한 아이템의 최소 개수를 출력한다.

입/출력 예시:

입력:

14

출력:

1

'''
'''
그리디 알고리즘은 보통 탐욕법이라고 번역을 하곤 합니다. 말 그대로 문제를 해결할 때 있어서 현재 경우만 고려해서 최적의 상황을 선택하는 방법입니다.

탐욕적이든 이런 선택이 항상 최적해를 구할 수 있는 방법은 아니기 때문에, 항상 사용할 수 있는 방법은 아닙니다. 하지만 다음 두 가지 조건이 성립하면 그리디 알고리즘을 효과적으로 적용할 수 있다고 알려져 있습니다.
	1.	현재의 선택이 이후 선택에 영향을 미치지 않는다.
	2.	현재의 선택이 최종 선택의 최적해 방법에 포함된다.

이 때문에 일반적인 코딩 테스트 문제의 레벨에서 나오는 유형은 한정되어 있습니다. 따라서 자주 나오는 몇 가지 상황에 대해 그리디로 해결할 수 있음을 알고 있으면, 이를 응용하는 문제를 만났을 때 훨씬 편하게 대처할 수 있을 것입니다.
이 문제는 통전 교환 문제로 잘 알려진 유형입니다. 사실 모든 통전 교환 문제가 그리디 알고리즘으로 해결되는 것은 아니지만, 이 문제와 같이 모든 통전 배수 관계에 있을 경우 그리디한 문제로 해결할 수 있습니다.
'''

N = int(input())

result = N // 14
N %= 14

result += N // 7
N %= 7

result += N

print(result)

'''
문제

통증지수라는 시스템이 있다. 통증 지수가 높다면 게임에서 승리하기 어려워지므로, 아이템을 적절히 사용해 통증 지수를 0으로 유지하는 것이 중요하다.
게임 안에는 통증 지수를 감소시켜 주는 아이템이 2종류가 있다. 아이템의 이름은 A, B이고, 각 아이템을 사용 시 각각 Aₚ, Bₚ만큼 통증 지수를 감소시켜 준다. 각 아이템은 원하는 만큼 획득할 수 있다.
플레이어는 적과의 전투에서 피해를 입어 현재 N의 통증 지수를 가지고 있다. 플레이어의 통증 지수를 0으로 줄이기 위해 필요한 아이템의 최소 개수를 구해보자. 단, 사용했을 때 통증 지수가 0보다 작아지는 아이템은 사용할 수 없음을 유의하시오.

입력

첫째 줄에 플레이어의 통증 지수를 나타내는 정수 N이 주어진다.
둘째 줄에 아이템 A, B가 줄일 수 있는 통증 수치 Aₚ, Bₚ가 공백을 두고 주어진다.

2 ≤ N ≤ 10⁶
2 ≤ Aₚ, Bₚ ≤ 13
Aₚ와 Bₚ는 배수 관계가 아니다.

출력

플레이어가 통증 지수를 0으로 줄이기 위해 필요한 아이템의 최소 개수를 출력한다.
단, 통증 지수를 0으로 만들 수 없는 경우에는 -1을 출력한다.

입/출력 예시

입력:

7  
2 3

출력:

3
'''

